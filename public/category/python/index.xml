<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python | Zach Bogart</title>
    <link>/category/python/</link>
      <atom:link href="/category/python/index.xml" rel="self" type="application/rss+xml" />
    <description>Python</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2020</copyright><lastBuildDate>Thu, 04 Jun 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/happy_nerd02.png</url>
      <title>Python</title>
      <link>/category/python/</link>
    </image>
    
    <item>
      <title>Twelve Clock List</title>
      <link>/blog/twelve-clock/</link>
      <pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate>
      <guid>/blog/twelve-clock/</guid>
      <description>&lt;h2 id=&#34;what&#34;&gt;&amp;hellip;What?&lt;/h2&gt;
&lt;p&gt;Whenever I see a digital clock, I do a little math in my head. I try to take the numbers and, using only addition, subtraction, multiplication and division, get them to come out to twelve. I thought I&amp;rsquo;d try to get an exhaustive list of times that this trick applies to. Let&amp;rsquo;s figure it out!&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import re
import pandas as pd

import seaborn as sns
import matplotlib.pyplot as plt
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;look-at-the-time&#34;&gt;Look at the Time&lt;/h2&gt;
&lt;p&gt;First we need to get a list of the times. I&amp;rsquo;m going to work with strings. Let&amp;rsquo;s go through some numbers and rule out invalid ones by places.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;valid = []
for x in range(100, 1260):
    num = &#39;&#39;
    num += str(x)
    
    if len(num) == 3:
        if int(num[0]) &amp;lt;= 9 and int(num[1]) &amp;lt;= 5:
            valid.append(num)
    if len(num) == 4:
        if int(num[0]) &amp;lt;= 1 and int(num[1]) &amp;lt;= 2 and int(num[2]) &amp;lt;= 5:
            valid.append(num)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cool. We can check that we have 720, which is half of all times since they all repeat once. Now we can go about making possible math expressions.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;len(valid)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;720
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;valid[:4]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;100&#39;, &#39;101&#39;, &#39;102&#39;, &#39;103&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;prep-the-times&#34;&gt;Prep the Times&lt;/h2&gt;
&lt;p&gt;To do this, I&amp;rsquo;m going to put together strings of math expressions for all permutations of the numbers, then evaluate them and see which ones work. Certainly brute force, but it&amp;rsquo;ll work. First, I make a dictionary of all permutations of the numbers for each time.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# moded from https://www.geeksforgeeks.org/python-permutation-given-string-using-inbuilt-function/
from itertools import permutations 

def allPermutations(str): 
    
    perm_array = []

    # Get all permutations of string &#39;ABC&#39; 
    permList = permutations(str) 

    # print all permutations 
    for perm in list(permList): 
        result = &#39;&#39;.join(perm)
        perm_array.append(result)
    
    return list(set(perm_array))
        
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;time_dict = {}

for time in valid:
    time_dict[time] = allPermutations(time)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;time_dict[&#39;957&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;795&#39;, &#39;957&#39;, &#39;579&#39;, &#39;597&#39;, &#39;759&#39;, &#39;975&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, I go and add in all possible combinations of operators (&lt;code&gt;+, -, *, /&lt;/code&gt;) in between the numbers. I also add in parens since &lt;code&gt;eval&lt;/code&gt; follows PEMDAS and we want to avoid that in many cases.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;equations = {}

for time, perms in time_dict.items():
    eq = &#39;&#39;
    ops = &#39;+-*/&#39;
    if len(time) == 3:
        equations[time] = []
        for perm in perms:
            for a in ops:
                for b in ops:
                    eq = f&amp;quot;{perm[0]}{a}{perm[1]}{b}{perm[2]}&amp;quot;
                    eq = re.sub(r&#39;([0-9])&#39;, r&#39;\1)&#39;, eq)
                    eq = &#39;(((&#39; + eq
                    equations[time].append(eq)
    if len(time) == 4:
        equations[time] = []
        for perm in perms:
            for a in ops:
                for b in ops:
                    for c in ops:
                        eq = f&amp;quot;{perm[0]}{a}{perm[1]}{b}{perm[2]}{c}{perm[3]}&amp;quot;
                        eq = re.sub(r&#39;([0-9])&#39;, r&#39;\1)&#39;, eq)
                        eq = &#39;((((&#39; + eq
                        equations[time].append(eq)
                            
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;equations[&#39;100&#39;][:10]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;(((0)+0)+1)&#39;,
 &#39;(((0)+0)-1)&#39;,
 &#39;(((0)+0)*1)&#39;,
 &#39;(((0)+0)/1)&#39;,
 &#39;(((0)-0)+1)&#39;,
 &#39;(((0)-0)-1)&#39;,
 &#39;(((0)-0)*1)&#39;,
 &#39;(((0)-0)/1)&#39;,
 &#39;(((0)*0)+1)&#39;,
 &#39;(((0)*0)-1)&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;look-at-the-time-1&#34;&gt;Look at the Time&lt;/h2&gt;
&lt;p&gt;Cool. Now that we have a bunch of expressions, let&amp;rsquo;s evaluate them and see what we get.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;they_work = {}

for time, eq_list in equations.items():
    for eq in eq_list:
        try:
            result = eval(eq)
        except ZeroDivisionError:
            continue
        if result == 12 and time not in they_work.keys():
            they_work[time] = eq
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;they_work
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;{&#39;116&#39;: &#39;(((1)+1)*6)&#39;,
 &#39;124&#39;: &#39;(((2)+1)*4)&#39;,
 &#39;125&#39;: &#39;(((5)+1)*2)&#39;,
 &#39;126&#39;: &#39;(((6)*1)*2)&#39;,
 &#39;127&#39;: &#39;(((7)-1)*2)&#39;,
 &#39;129&#39;: &#39;(((9)+1)+2)&#39;,
 &#39;133&#39;: &#39;(((1)+3)*3)&#39;,
 &#39;134&#39;: &#39;(((1)*4)*3)&#39;,
 &#39;135&#39;: &#39;(((5)-1)*3)&#39;,
 &#39;136&#39;: &#39;(((3)-1)*6)&#39;,
 &#39;138&#39;: &#39;(((1)+3)+8)&#39;,
 &#39;139&#39;: &#39;(((3)+9)*1)&#39;,
 &#39;142&#39;: &#39;(((2)+1)*4)&#39;,
 &#39;143&#39;: &#39;(((1)*4)*3)&#39;,
 &#39;144&#39;: &#39;(((4)-1)*4)&#39;,
 &#39;147&#39;: &#39;(((7)+4)+1)&#39;,
 &#39;148&#39;: &#39;(((8)+4)*1)&#39;,
 &#39;149&#39;: &#39;(((9)+4)-1)&#39;,
 &#39;152&#39;: &#39;(((5)+1)*2)&#39;,
 &#39;153&#39;: &#39;(((5)-1)*3)&#39;,
 &#39;156&#39;: &#39;(((6)+1)+5)&#39;,
 &#39;157&#39;: &#39;(((1)*7)+5)&#39;,
 &#39;158&#39;: &#39;(((5)-1)+8)&#39;,
 &#39;206&#39;: &#39;(((2)+0)*6)&#39;,
 &#39;214&#39;: &#39;(((2)+1)*4)&#39;,
 &#39;215&#39;: &#39;(((5)+1)*2)&#39;,
 &#39;216&#39;: &#39;(((6)*1)*2)&#39;,
 &#39;217&#39;: &#39;(((7)-1)*2)&#39;,
 &#39;219&#39;: &#39;(((9)+1)+2)&#39;,
 &#39;223&#39;: &#39;(((3)*2)*2)&#39;,
 &#39;224&#39;: &#39;(((2)+4)*2)&#39;,
 &#39;225&#39;: &#39;(((5)*2)+2)&#39;,
 &#39;227&#39;: &#39;(((7)*2)-2)&#39;,
 &#39;228&#39;: &#39;(((2)+2)+8)&#39;,
 &#39;232&#39;: &#39;(((3)*2)*2)&#39;,
 &#39;233&#39;: &#39;(((3)+3)*2)&#39;,
 &#39;236&#39;: &#39;(((2)*3)+6)&#39;,
 &#39;237&#39;: &#39;(((2)+3)+7)&#39;,
 &#39;238&#39;: &#39;(((3)/2)*8)&#39;,
 &#39;239&#39;: &#39;(((9)-3)*2)&#39;,
 &#39;241&#39;: &#39;(((2)+1)*4)&#39;,
 &#39;242&#39;: &#39;(((2)+4)*2)&#39;,
 &#39;244&#39;: &#39;(((4)*2)+4)&#39;,
 &#39;245&#39;: &#39;(((5)-2)*4)&#39;,
 &#39;246&#39;: &#39;(((4)+6)+2)&#39;,
 &#39;248&#39;: &#39;(((2)*8)-4)&#39;,
 &#39;251&#39;: &#39;(((5)+1)*2)&#39;,
 &#39;252&#39;: &#39;(((5)*2)+2)&#39;,
 &#39;254&#39;: &#39;(((5)-2)*4)&#39;,
 &#39;255&#39;: &#39;(((2)+5)+5)&#39;,
 &#39;259&#39;: &#39;(((5)-2)+9)&#39;,
 &#39;304&#39;: &#39;(((0)+4)*3)&#39;,
 &#39;309&#39;: &#39;(((0)+3)+9)&#39;,
 &#39;313&#39;: &#39;(((1)+3)*3)&#39;,
 &#39;314&#39;: &#39;(((1)*4)*3)&#39;,
 &#39;315&#39;: &#39;(((5)-1)*3)&#39;,
 &#39;316&#39;: &#39;(((3)-1)*6)&#39;,
 &#39;318&#39;: &#39;(((1)+3)+8)&#39;,
 &#39;319&#39;: &#39;(((3)+9)*1)&#39;,
 &#39;322&#39;: &#39;(((2)+2)*3)&#39;,
 &#39;323&#39;: &#39;(((3)+3)*2)&#39;,
 &#39;326&#39;: &#39;(((2)*3)+6)&#39;,
 &#39;327&#39;: &#39;(((2)+3)+7)&#39;,
 &#39;328&#39;: &#39;(((3)/2)*8)&#39;,
 &#39;329&#39;: &#39;(((9)-3)*2)&#39;,
 &#39;331&#39;: &#39;(((1)+3)*3)&#39;,
 &#39;332&#39;: &#39;(((3)+3)*2)&#39;,
 &#39;333&#39;: &#39;(((3)*3)+3)&#39;,
 &#39;335&#39;: &#39;(((5)*3)-3)&#39;,
 &#39;336&#39;: &#39;(((3)+6)+3)&#39;,
 &#39;337&#39;: &#39;(((7)-3)*3)&#39;,
 &#39;340&#39;: &#39;(((0)+4)*3)&#39;,
 &#39;341&#39;: &#39;(((1)*4)*3)&#39;,
 &#39;345&#39;: &#39;(((5)+3)+4)&#39;,
 &#39;346&#39;: &#39;(((6)-3)*4)&#39;,
 &#39;348&#39;: &#39;(((8)-4)*3)&#39;,
 &#39;349&#39;: &#39;(((9)/3)*4)&#39;,
 &#39;351&#39;: &#39;(((5)-1)*3)&#39;,
 &#39;353&#39;: &#39;(((5)*3)-3)&#39;,
 &#39;354&#39;: &#39;(((5)+3)+4)&#39;,
 &#39;356&#39;: &#39;(((5)-3)*6)&#39;,
 &#39;359&#39;: &#39;(((9)-5)*3)&#39;,
 &#39;403&#39;: &#39;(((0)+4)*3)&#39;,
 &#39;408&#39;: &#39;(((8)+4)+0)&#39;,
 &#39;412&#39;: &#39;(((2)+1)*4)&#39;,
 &#39;413&#39;: &#39;(((1)*4)*3)&#39;,
 &#39;414&#39;: &#39;(((4)-1)*4)&#39;,
 &#39;417&#39;: &#39;(((7)+4)+1)&#39;,
 &#39;418&#39;: &#39;(((8)+4)*1)&#39;,
 &#39;419&#39;: &#39;(((9)+4)-1)&#39;,
 &#39;421&#39;: &#39;(((2)+1)*4)&#39;,
 &#39;422&#39;: &#39;(((2)+4)*2)&#39;,
 &#39;424&#39;: &#39;(((4)*2)+4)&#39;,
 &#39;425&#39;: &#39;(((5)-2)*4)&#39;,
 &#39;426&#39;: &#39;(((2)+6)+4)&#39;,
 &#39;428&#39;: &#39;(((2)*8)-4)&#39;,
 &#39;430&#39;: &#39;(((0)+4)*3)&#39;,
 &#39;431&#39;: &#39;(((1)*4)*3)&#39;,
 &#39;435&#39;: &#39;(((5)+3)+4)&#39;,
 &#39;436&#39;: &#39;(((6)-3)*4)&#39;,
 &#39;438&#39;: &#39;(((8)-4)*3)&#39;,
 &#39;439&#39;: &#39;(((9)/3)*4)&#39;,
 &#39;441&#39;: &#39;(((4)-1)*4)&#39;,
 &#39;442&#39;: &#39;(((2)*4)+4)&#39;,
 &#39;444&#39;: &#39;(((4)+4)+4)&#39;,
 &#39;447&#39;: &#39;(((7)-4)*4)&#39;,
 &#39;452&#39;: &#39;(((5)-2)*4)&#39;,
 &#39;453&#39;: &#39;(((5)+3)+4)&#39;,
 &#39;458&#39;: &#39;(((8)-5)*4)&#39;,
 &#39;507&#39;: &#39;(((5)+7)+0)&#39;,
 &#39;512&#39;: &#39;(((5)+1)*2)&#39;,
 &#39;513&#39;: &#39;(((5)-1)*3)&#39;,
 &#39;516&#39;: &#39;(((5)+1)+6)&#39;,
 &#39;517&#39;: &#39;(((1)*7)+5)&#39;,
 &#39;518&#39;: &#39;(((5)-1)+8)&#39;,
 &#39;521&#39;: &#39;(((5)+1)*2)&#39;,
 &#39;522&#39;: &#39;(((5)*2)+2)&#39;,
 &#39;524&#39;: &#39;(((5)-2)*4)&#39;,
 &#39;525&#39;: &#39;(((2)+5)+5)&#39;,
 &#39;529&#39;: &#39;(((5)-2)+9)&#39;,
 &#39;531&#39;: &#39;(((5)-1)*3)&#39;,
 &#39;533&#39;: &#39;(((5)*3)-3)&#39;,
 &#39;534&#39;: &#39;(((5)+3)+4)&#39;,
 &#39;536&#39;: &#39;(((5)-3)*6)&#39;,
 &#39;539&#39;: &#39;(((9)-5)*3)&#39;,
 &#39;542&#39;: &#39;(((5)-2)*4)&#39;,
 &#39;543&#39;: &#39;(((5)+3)+4)&#39;,
 &#39;548&#39;: &#39;(((8)-5)*4)&#39;,
 &#39;552&#39;: &#39;(((2)+5)+5)&#39;,
 &#39;602&#39;: &#39;(((2)+0)*6)&#39;,
 &#39;606&#39;: &#39;(((6)+6)+0)&#39;,
 &#39;611&#39;: &#39;(((1)+1)*6)&#39;,
 &#39;612&#39;: &#39;(((6)*1)*2)&#39;,
 &#39;613&#39;: &#39;(((3)-1)*6)&#39;,
 &#39;615&#39;: &#39;(((6)+1)+5)&#39;,
 &#39;616&#39;: &#39;(((1)*6)+6)&#39;,
 &#39;617&#39;: &#39;(((6)+7)-1)&#39;,
 &#39;620&#39;: &#39;(((2)+0)*6)&#39;,
 &#39;621&#39;: &#39;(((6)*1)*2)&#39;,
 &#39;623&#39;: &#39;(((2)*3)+6)&#39;,
 &#39;624&#39;: &#39;(((4)+6)+2)&#39;,
 &#39;628&#39;: &#39;(((6)+8)-2)&#39;,
 &#39;629&#39;: &#39;(((9)*2)-6)&#39;,
 &#39;631&#39;: &#39;(((3)-1)*6)&#39;,
 &#39;632&#39;: &#39;(((2)*3)+6)&#39;,
 &#39;633&#39;: &#39;(((3)+6)+3)&#39;,
 &#39;634&#39;: &#39;(((6)-3)*4)&#39;,
 &#39;635&#39;: &#39;(((5)-3)*6)&#39;,
 &#39;636&#39;: &#39;(((3)*6)-6)&#39;,
 &#39;639&#39;: &#39;(((9)-3)+6)&#39;,
 &#39;642&#39;: &#39;(((2)+6)+4)&#39;,
 &#39;643&#39;: &#39;(((6)-3)*4)&#39;,
 &#39;646&#39;: &#39;(((6)-4)*6)&#39;,
 &#39;648&#39;: &#39;(((6)*8)/4)&#39;,
 &#39;649&#39;: &#39;(((9)-6)*4)&#39;,
 &#39;651&#39;: &#39;(((6)+1)+5)&#39;,
 &#39;653&#39;: &#39;(((5)-3)*6)&#39;,
 &#39;657&#39;: &#39;(((7)-5)*6)&#39;,
 &#39;705&#39;: &#39;(((0)+5)+7)&#39;,
 &#39;712&#39;: &#39;(((7)-1)*2)&#39;,
 &#39;714&#39;: &#39;(((7)+4)+1)&#39;,
 &#39;715&#39;: &#39;(((1)*7)+5)&#39;,
 &#39;716&#39;: &#39;(((6)+7)-1)&#39;,
 &#39;721&#39;: &#39;(((7)-1)*2)&#39;,
 &#39;722&#39;: &#39;(((2)*7)-2)&#39;,
 &#39;723&#39;: &#39;(((2)+3)+7)&#39;,
 &#39;727&#39;: &#39;(((7)+7)-2)&#39;,
 &#39;732&#39;: &#39;(((2)+3)+7)&#39;,
 &#39;733&#39;: &#39;(((7)-3)*3)&#39;,
 &#39;738&#39;: &#39;(((7)-3)+8)&#39;,
 &#39;739&#39;: &#39;(((7)*3)-9)&#39;,
 &#39;741&#39;: &#39;(((7)+4)+1)&#39;,
 &#39;744&#39;: &#39;(((7)-4)*4)&#39;,
 &#39;749&#39;: &#39;(((9)-4)+7)&#39;,
 &#39;750&#39;: &#39;(((0)+5)+7)&#39;,
 &#39;751&#39;: &#39;(((1)*7)+5)&#39;,
 &#39;756&#39;: &#39;(((7)-5)*6)&#39;,
 &#39;804&#39;: &#39;(((8)+4)+0)&#39;,
 &#39;813&#39;: &#39;(((1)+3)+8)&#39;,
 &#39;814&#39;: &#39;(((8)+4)*1)&#39;,
 &#39;815&#39;: &#39;(((5)-1)+8)&#39;,
 &#39;822&#39;: &#39;(((8)+2)+2)&#39;,
 &#39;823&#39;: &#39;(((3)/2)*8)&#39;,
 &#39;824&#39;: &#39;(((2)*8)-4)&#39;,
 &#39;826&#39;: &#39;(((6)+8)-2)&#39;,
 &#39;828&#39;: &#39;(((8)/2)+8)&#39;,
 &#39;831&#39;: &#39;(((1)+3)+8)&#39;,
 &#39;832&#39;: &#39;(((3)/2)*8)&#39;,
 &#39;834&#39;: &#39;(((8)-4)*3)&#39;,
 &#39;837&#39;: &#39;(((7)-3)+8)&#39;,
 &#39;840&#39;: &#39;(((8)+4)+0)&#39;,
 &#39;841&#39;: &#39;(((8)+4)*1)&#39;,
 &#39;842&#39;: &#39;(((2)*8)-4)&#39;,
 &#39;843&#39;: &#39;(((8)-4)*3)&#39;,
 &#39;845&#39;: &#39;(((8)-5)*4)&#39;,
 &#39;846&#39;: &#39;(((6)*8)/4)&#39;,
 &#39;848&#39;: &#39;(((8)-4)+8)&#39;,
 &#39;851&#39;: &#39;(((5)-1)+8)&#39;,
 &#39;854&#39;: &#39;(((8)-5)*4)&#39;,
 &#39;859&#39;: &#39;(((9)+8)-5)&#39;,
 &#39;903&#39;: &#39;(((0)+3)+9)&#39;,
 &#39;912&#39;: &#39;(((9)+1)+2)&#39;,
 &#39;913&#39;: &#39;(((3)+9)*1)&#39;,
 &#39;914&#39;: &#39;(((9)+4)-1)&#39;,
 &#39;921&#39;: &#39;(((9)+1)+2)&#39;,
 &#39;923&#39;: &#39;(((9)-3)*2)&#39;,
 &#39;925&#39;: &#39;(((5)-2)+9)&#39;,
 &#39;926&#39;: &#39;(((9)*2)-6)&#39;,
 &#39;930&#39;: &#39;(((0)+3)+9)&#39;,
 &#39;931&#39;: &#39;(((3)+9)*1)&#39;,
 &#39;932&#39;: &#39;(((9)-3)*2)&#39;,
 &#39;934&#39;: &#39;(((9)/3)*4)&#39;,
 &#39;935&#39;: &#39;(((9)-5)*3)&#39;,
 &#39;936&#39;: &#39;(((9)-3)+6)&#39;,
 &#39;937&#39;: &#39;(((7)*3)-9)&#39;,
 &#39;939&#39;: &#39;(((9)/3)+9)&#39;,
 &#39;941&#39;: &#39;(((9)+4)-1)&#39;,
 &#39;943&#39;: &#39;(((9)/3)*4)&#39;,
 &#39;946&#39;: &#39;(((9)-6)*4)&#39;,
 &#39;947&#39;: &#39;(((9)-4)+7)&#39;,
 &#39;952&#39;: &#39;(((5)-2)+9)&#39;,
 &#39;953&#39;: &#39;(((9)-5)*3)&#39;,
 &#39;958&#39;: &#39;(((9)+8)-5)&#39;,
 &#39;1016&#39;: &#39;((((1)+1)+0)*6)&#39;,
 &#39;1024&#39;: &#39;((((1)+2)+0)*4)&#39;,
 &#39;1025&#39;: &#39;((((5)+0)+1)*2)&#39;,
 &#39;1026&#39;: &#39;((((1)*2)*6)+0)&#39;,
 &#39;1027&#39;: &#39;((((7)+0)-1)*2)&#39;,
 &#39;1029&#39;: &#39;((((1)+9)+0)+2)&#39;,
 &#39;1033&#39;: &#39;((((3)+1)+0)*3)&#39;,
 &#39;1034&#39;: &#39;((((1)*3)*4)+0)&#39;,
 &#39;1035&#39;: &#39;((((5)+0)-1)*3)&#39;,
 &#39;1036&#39;: &#39;((((3)-1)+0)*6)&#39;,
 &#39;1038&#39;: &#39;((((1)+8)+0)+3)&#39;,
 &#39;1039&#39;: &#39;((((0)+9)*1)+3)&#39;,
 &#39;1042&#39;: &#39;((((1)+2)+0)*4)&#39;,
 &#39;1043&#39;: &#39;((((1)*3)*4)+0)&#39;,
 &#39;1044&#39;: &#39;((((4)-1)+0)*4)&#39;,
 &#39;1047&#39;: &#39;((((0)+1)+4)+7)&#39;,
 &#39;1048&#39;: &#39;((((8)*1)+4)+0)&#39;,
 &#39;1049&#39;: &#39;((((4)+0)+9)-1)&#39;,
 &#39;1052&#39;: &#39;((((5)+0)+1)*2)&#39;,
 &#39;1053&#39;: &#39;((((5)+0)-1)*3)&#39;,
 &#39;1056&#39;: &#39;((((6)+0)+5)+1)&#39;,
 &#39;1057&#39;: &#39;((((7)+0)+5)*1)&#39;,
 &#39;1058&#39;: &#39;((((8)+0)+5)-1)&#39;,
 &#39;1106&#39;: &#39;((((1)+1)+0)*6)&#39;,
 &#39;1114&#39;: &#39;((((1)+1)+1)*4)&#39;,
 &#39;1116&#39;: &#39;((((1)+1)*6)*1)&#39;,
 &#39;1119&#39;: &#39;((((9)+1)+1)+1)&#39;,
 &#39;1123&#39;: &#39;((((2)+1)+1)*3)&#39;,
 &#39;1124&#39;: &#39;((((4)+1)+1)*2)&#39;,
 &#39;1125&#39;: &#39;((((2)*5)+1)+1)&#39;,
 &#39;1126&#39;: &#39;((((2)*1)*6)*1)&#39;,
 &#39;1127&#39;: &#39;((((7)-1)*2)*1)&#39;,
 &#39;1128&#39;: &#39;((((2)+1)+1)+8)&#39;,
 &#39;1129&#39;: &#39;((((1)+2)*1)+9)&#39;,
 &#39;1132&#39;: &#39;((((2)+1)+1)*3)&#39;,
 &#39;1133&#39;: &#39;((((1)*1)+3)*3)&#39;,
 &#39;1134&#39;: &#39;((((3)*1)*4)*1)&#39;,
 &#39;1135&#39;: &#39;((((5)-1)*3)*1)&#39;,
 &#39;1136&#39;: &#39;((((1)*3)-1)*6)&#39;,
 &#39;1137&#39;: &#39;((((3)+1)+1)+7)&#39;,
 &#39;1138&#39;: &#39;((((3)+1)+8)*1)&#39;,
 &#39;1139&#39;: &#39;((((9)+3)+1)-1)&#39;,
 &#39;1141&#39;: &#39;((((1)+1)+1)*4)&#39;,
 &#39;1142&#39;: &#39;((((4)+1)+1)*2)&#39;,
 &#39;1143&#39;: &#39;((((3)*1)*4)*1)&#39;,
 &#39;1144&#39;: &#39;((((4)-1)*4)*1)&#39;,
 &#39;1145&#39;: &#39;((((5)-1)-1)*4)&#39;,
 &#39;1146&#39;: &#39;((((1)+4)+1)+6)&#39;,
 &#39;1147&#39;: &#39;((((1)+7)+4)*1)&#39;,
 &#39;1148&#39;: &#39;((((1)+8)+4)-1)&#39;,
 &#39;1149&#39;: &#39;((((4)+9)-1)*1)&#39;,
 &#39;1152&#39;: &#39;((((2)*5)+1)+1)&#39;,
 &#39;1153&#39;: &#39;((((5)-1)*3)*1)&#39;,
 &#39;1154&#39;: &#39;((((5)-1)-1)*4)&#39;,
 &#39;1155&#39;: &#39;((((5)+1)+5)+1)&#39;,
 &#39;1156&#39;: &#39;((((1)+6)+5)*1)&#39;,
 &#39;1157&#39;: &#39;((((7)+1)+5)-1)&#39;,
 &#39;1158&#39;: &#39;((((5)-1)+8)*1)&#39;,
 &#39;1159&#39;: &#39;((((5)-1)+9)-1)&#39;,
 &#39;1204&#39;: &#39;((((1)+2)+0)*4)&#39;,
 &#39;1205&#39;: &#39;((((5)+0)+1)*2)&#39;,
 &#39;1206&#39;: &#39;((((1)*2)*6)+0)&#39;,
 &#39;1207&#39;: &#39;((((7)+0)-1)*2)&#39;,
 &#39;1209&#39;: &#39;((((1)+9)+0)+2)&#39;,
 &#39;1213&#39;: &#39;((((2)+1)+1)*3)&#39;,
 &#39;1214&#39;: &#39;((((4)+1)+1)*2)&#39;,
 &#39;1215&#39;: &#39;((((2)*5)+1)+1)&#39;,
 &#39;1216&#39;: &#39;((((2)*1)*6)*1)&#39;,
 &#39;1217&#39;: &#39;((((7)-1)*2)*1)&#39;,
 &#39;1218&#39;: &#39;((((2)+1)+1)+8)&#39;,
 &#39;1219&#39;: &#39;((((1)+2)*1)+9)&#39;,
 &#39;1222&#39;: &#39;((((1)+2)*2)*2)&#39;,
 &#39;1223&#39;: &#39;((((2)+2)*3)*1)&#39;,
 &#39;1224&#39;: &#39;((((1)+4)*2)+2)&#39;,
 &#39;1225&#39;: &#39;((((2)+5)-1)*2)&#39;,
 &#39;1226&#39;: &#39;((((2)/2)+1)*6)&#39;,
 &#39;1227&#39;: &#39;((((1)+2)+7)+2)&#39;,
 &#39;1228&#39;: &#39;((((2)+1)*8)/2)&#39;,
 &#39;1229&#39;: &#39;((((2)+9)-1)+2)&#39;,
 &#39;1231&#39;: &#39;((((1)+1)*3)*2)&#39;,
 &#39;1232&#39;: &#39;((((2)+2)*3)*1)&#39;,
 &#39;1233&#39;: &#39;((((3)-1)*3)*2)&#39;,
 &#39;1234&#39;: &#39;((((3)+1)*2)+4)&#39;,
 &#39;1235&#39;: &#39;((((2)*5)+3)-1)&#39;,
 &#39;1236&#39;: &#39;((((6)+3)+2)+1)&#39;,
 &#39;1237&#39;: &#39;((((1)*3)+2)+7)&#39;,
 &#39;1238&#39;: &#39;((((2)+3)-1)+8)&#39;,
 &#39;1239&#39;: &#39;((((9)-1)*3)/2)&#39;,
 &#39;1240&#39;: &#39;((((1)+2)+0)*4)&#39;,
 &#39;1241&#39;: &#39;((((4)+1)+1)*2)&#39;,
 &#39;1242&#39;: &#39;((((1)+4)*2)+2)&#39;,
 &#39;1243&#39;: &#39;((((3)+1)*2)+4)&#39;,
 &#39;1244&#39;: &#39;((((2)*4)+4)*1)&#39;,
 &#39;1245&#39;: &#39;((((5)+1)+4)+2)&#39;,
 &#39;1246&#39;: &#39;((((1)*6)+2)+4)&#39;,
 &#39;1247&#39;: &#39;((((4)+2)+7)-1)&#39;,
 &#39;1248&#39;: &#39;((((8)*1)*2)-4)&#39;,
 &#39;1249&#39;: &#39;((((4)-2)+9)+1)&#39;,
 &#39;1250&#39;: &#39;((((5)+0)+1)*2)&#39;,
 &#39;1251&#39;: &#39;((((2)*5)+1)+1)&#39;,
 &#39;1252&#39;: &#39;((((2)+5)-1)*2)&#39;,
 &#39;1253&#39;: &#39;((((2)*5)+3)-1)&#39;,
 &#39;1254&#39;: &#39;((((5)+1)+4)+2)&#39;,
 &#39;1255&#39;: &#39;((((1)*5)+2)+5)&#39;,
 &#39;1256&#39;: &#39;((((5)+2)+6)-1)&#39;,
 &#39;1257&#39;: &#39;((((2)-1)*7)+5)&#39;,
 &#39;1258&#39;: &#39;((((8)+1)-2)+5)&#39;,
 &#39;1259&#39;: &#39;((((2)*9)-5)-1)&#39;}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(f&amp;quot;So this trick works {len(they_work.keys()) / len(valid) * 100:.2f}% of the time&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;So this trick works 45.97% of the time
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;wellthere-ya-go&#34;&gt;Well&amp;hellip;there ya go&lt;/h2&gt;
&lt;p&gt;There are a bunch that are easy to spot. Was interesting to see ones where division is used.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[x for x in they_work.values() if &#39;/&#39; in x]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;(((3)/2)*8)&#39;,
 &#39;(((3)/2)*8)&#39;,
 &#39;(((9)/3)*4)&#39;,
 &#39;(((9)/3)*4)&#39;,
 &#39;(((6)*8)/4)&#39;,
 &#39;(((3)/2)*8)&#39;,
 &#39;(((8)/2)+8)&#39;,
 &#39;(((3)/2)*8)&#39;,
 &#39;(((6)*8)/4)&#39;,
 &#39;(((9)/3)*4)&#39;,
 &#39;(((9)/3)+9)&#39;,
 &#39;(((9)/3)*4)&#39;,
 &#39;((((2)/2)+1)*6)&#39;,
 &#39;((((2)+1)*8)/2)&#39;,
 &#39;((((9)-1)*3)/2)&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Maybe you&amp;rsquo;ll give it a try next time you spot a digital clock&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;dataframe-of-the-results&#34;&gt;DataFrame of the results&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.DataFrame(valid)
df.rename(columns={0: &#39;raw&#39;}, inplace=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;raw_temp&#39;] = df[&#39;raw&#39;].apply(lambda x: &#39;0&#39; + x if len(x) == 3 else x)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;time&#39;] = df[&#39;raw_temp&#39;].apply(lambda x: pd.to_datetime(x, format=&#39;%H%M&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;raw&lt;/th&gt;
      &lt;th&gt;raw_temp&lt;/th&gt;
      &lt;th&gt;time&lt;/th&gt;
      &lt;th&gt;twelve&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;0100&lt;/td&gt;
      &lt;td&gt;1900-01-01 01:00:00&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;101&lt;/td&gt;
      &lt;td&gt;0101&lt;/td&gt;
      &lt;td&gt;1900-01-01 01:01:00&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;102&lt;/td&gt;
      &lt;td&gt;0102&lt;/td&gt;
      &lt;td&gt;1900-01-01 01:02:00&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;103&lt;/td&gt;
      &lt;td&gt;0103&lt;/td&gt;
      &lt;td&gt;1900-01-01 01:03:00&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;104&lt;/td&gt;
      &lt;td&gt;0104&lt;/td&gt;
      &lt;td&gt;1900-01-01 01:04:00&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;valid_times = list(they_work.keys())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;twelve&#39;] = df[&#39;raw&#39;].isin(valid_times)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;raw&lt;/th&gt;
      &lt;th&gt;raw_temp&lt;/th&gt;
      &lt;th&gt;time&lt;/th&gt;
      &lt;th&gt;twelve&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;0100&lt;/td&gt;
      &lt;td&gt;1900-01-01 01:00:00&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;101&lt;/td&gt;
      &lt;td&gt;0101&lt;/td&gt;
      &lt;td&gt;1900-01-01 01:01:00&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;102&lt;/td&gt;
      &lt;td&gt;0102&lt;/td&gt;
      &lt;td&gt;1900-01-01 01:02:00&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;103&lt;/td&gt;
      &lt;td&gt;0103&lt;/td&gt;
      &lt;td&gt;1900-01-01 01:03:00&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;104&lt;/td&gt;
      &lt;td&gt;0104&lt;/td&gt;
      &lt;td&gt;1900-01-01 01:04:00&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;image-credit&#34;&gt;Image Credit&lt;/h3&gt;
&lt;p&gt;Twelve by Zach Bogart from the 
&lt;a href=&#34;https://thenounproject.com/search/?q=twelve&amp;amp;creator=4129988&amp;amp;i=2184535&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Noun Project&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Looking into YouTube Free Movies</title>
      <link>/blog/youtube-movies/</link>
      <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
      <guid>/blog/youtube-movies/</guid>
      <description>&lt;p&gt;I saw that YouTube had 
&lt;a href=&#34;https://www.youtube.com/movies&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;a wide selection of movies&lt;/a&gt;, but the free movies didn&amp;rsquo;t seem very good. Was interested in seeing what kind of ratings the free movies on YouTube receive. Let&amp;rsquo;s figure it out!&lt;/p&gt;
&lt;h2 id=&#34;go-to-the-movies&#34;&gt;Go to the Movies&lt;/h2&gt;
&lt;p&gt;To start, let&amp;rsquo;s import some things.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import requests
from bs4 import BeautifulSoup

import seaborn as sns
import matplotlib.pyplot as plt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use &lt;code&gt;requests&lt;/code&gt; to grab the html.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;url = &#39;https://www.youtube.com/feed/storefront?bp=kgEmCGQSIlBMSFBUeFR4dEMwaWJWWnJUMl9XS1dVbDJTQXhzS3VLd3iiBQIoAg%3D%3D&#39;
page = requests.get(url)

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;soup = BeautifulSoup(page.text, &#39;html.parser&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(soup.prettify()[:200])

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html data-cast-api-enabled=&amp;quot;true&amp;quot; lang=&amp;quot;en&amp;quot;&amp;gt;
 &amp;lt;head&amp;gt;
  &amp;lt;style name=&amp;quot;www-roboto&amp;quot;&amp;gt;
   @font-face{font-family:&#39;Roboto&#39;;font-style:normal;font-weight:500;src:local(&#39;Roboto Medium&#39;),local(
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, we can do some inspecting to find that each film has a &lt;code&gt;yt-lockup-title&lt;/code&gt; class that we can access. With a little bit of fiddling, we can get a dataframe of the movie names. There is also a common format which we can use to split the strings into separate columns.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;html_films = soup.find_all(class_=&amp;quot;yt-lockup-title&amp;quot;)

for film in html_films[:5]:
    print(film.get_text())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Dino King - Duration: 1:28:47.
Snow Queen - Duration: 1:16:07.
Beyond Beyond - Duration: 1:19:24.
Igor (U.S) - Duration: 1:26:31.
Sleepover - Duration: 1:29:29.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;movies = [film.get_text() for film in html_films]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;movies[:6]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;Dino King - Duration: 1:28:47.&#39;,
 &#39;Snow Queen - Duration: 1:16:07.&#39;,
 &#39;Beyond Beyond - Duration: 1:19:24.&#39;,
 &#39;Igor (U.S) - Duration: 1:26:31.&#39;,
 &#39;Sleepover - Duration: 1:29:29.&#39;,
 &#39;The Secret of Nimh - Duration: 1:22:46.&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.DataFrame(movies)
df.rename(columns={0: &#39;movie&#39;}, inplace=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[df.movie.str.contains(&#39; - Duration: &#39;)].head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;movie&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Dino King - Duration: 1:28:47.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Snow Queen - Duration: 1:16:07.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Beyond Beyond - Duration: 1:19:24.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Igor (U.S) - Duration: 1:26:31.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Sleepover - Duration: 1:29:29.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = df.movie.str.split(&#39; - Duration: &#39;, expand=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[1] = df[1].str.rstrip(&#39;.&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = df.reset_index()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.rename(columns={0: &#39;yt_title&#39;, 1: &#39;yt_duration&#39;, &#39;index&#39;: &#39;yt_id&#39;}, inplace=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;yt_id&lt;/th&gt;
      &lt;th&gt;yt_title&lt;/th&gt;
      &lt;th&gt;yt_duration&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;Dino King&lt;/td&gt;
      &lt;td&gt;1:28:47&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Snow Queen&lt;/td&gt;
      &lt;td&gt;1:16:07&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;Beyond Beyond&lt;/td&gt;
      &lt;td&gt;1:19:24&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;Igor (U.S)&lt;/td&gt;
      &lt;td&gt;1:26:31&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;Sleepover&lt;/td&gt;
      &lt;td&gt;1:29:29&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;convert-duration-to-minutes&#34;&gt;Convert Duration to minutes&lt;/h3&gt;
&lt;p&gt;The string movie time doesn&amp;rsquo;t mean much to us. Let&amp;rsquo;s turn it into minutes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def split_time(x):
    numbers = x.split(&#39;:&#39;)
    time = int(numbers[0]) * 60 + int(numbers[1])
    return time
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;yt_minutes&#39;] = df[&#39;yt_duration&#39;].apply(split_time)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;imdb-data&#34;&gt;IMDb Data&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We will use data from the IMDb datasets to get info on the movie ratings.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;imdb_ratings = pd.read_csv(&#39;/Users/zachbogart/Downloads/title.ratings.tsv&#39;, sep=&#39;\t&#39;)
imdb_basics = pd.read_csv(&#39;/Users/zachbogart/Downloads/title.basics.tsv&#39;, sep=&#39;\t&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;/Users/zachbogart/Documents/venv-breadbasket/sourdough_venv/lib/python3.7/site-packages/IPython/core/interactiveshell.py:3058: DtypeWarning: Columns (5) have mixed types.Specify dtype option on import or set low_memory=False.
  interactivity=interactivity, compiler=compiler, result=result)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;imdb = imdb_basics.merge(imdb_ratings, how=&#39;left&#39;, on=&#39;tconst&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;imdb.shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(6831547, 11)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s look just at items that are &lt;code&gt;movie&lt;/code&gt;s&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;imdb.titleType.value_counts()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;tvEpisode       4869408
short            741081
movie            551301
video            265727
tvSeries         184466
tvMovie          121175
tvMiniSeries      31078
tvSpecial         29209
videoGame         25548
tvShort           12554
Name: titleType, dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;imdb = imdb.loc[imdb.titleType == &#39;movie&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;imdb.shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(551301, 11)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;imdb.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;tconst&lt;/th&gt;
      &lt;th&gt;titleType&lt;/th&gt;
      &lt;th&gt;primaryTitle&lt;/th&gt;
      &lt;th&gt;originalTitle&lt;/th&gt;
      &lt;th&gt;isAdult&lt;/th&gt;
      &lt;th&gt;startYear&lt;/th&gt;
      &lt;th&gt;endYear&lt;/th&gt;
      &lt;th&gt;runtimeMinutes&lt;/th&gt;
      &lt;th&gt;genres&lt;/th&gt;
      &lt;th&gt;averageRating&lt;/th&gt;
      &lt;th&gt;numVotes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;tt0000009&lt;/td&gt;
      &lt;td&gt;movie&lt;/td&gt;
      &lt;td&gt;Miss Jerry&lt;/td&gt;
      &lt;td&gt;Miss Jerry&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1894&lt;/td&gt;
      &lt;td&gt;\N&lt;/td&gt;
      &lt;td&gt;45&lt;/td&gt;
      &lt;td&gt;Romance&lt;/td&gt;
      &lt;td&gt;5.9&lt;/td&gt;
      &lt;td&gt;153.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;145&lt;/th&gt;
      &lt;td&gt;tt0000147&lt;/td&gt;
      &lt;td&gt;movie&lt;/td&gt;
      &lt;td&gt;The Corbett-Fitzsimmons Fight&lt;/td&gt;
      &lt;td&gt;The Corbett-Fitzsimmons Fight&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1897&lt;/td&gt;
      &lt;td&gt;\N&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;Documentary,News,Sport&lt;/td&gt;
      &lt;td&gt;5.2&lt;/td&gt;
      &lt;td&gt;346.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;332&lt;/th&gt;
      &lt;td&gt;tt0000335&lt;/td&gt;
      &lt;td&gt;movie&lt;/td&gt;
      &lt;td&gt;Soldiers of the Cross&lt;/td&gt;
      &lt;td&gt;Soldiers of the Cross&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1900&lt;/td&gt;
      &lt;td&gt;\N&lt;/td&gt;
      &lt;td&gt;\N&lt;/td&gt;
      &lt;td&gt;Biography,Drama&lt;/td&gt;
      &lt;td&gt;6.1&lt;/td&gt;
      &lt;td&gt;40.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;499&lt;/th&gt;
      &lt;td&gt;tt0000502&lt;/td&gt;
      &lt;td&gt;movie&lt;/td&gt;
      &lt;td&gt;Bohemios&lt;/td&gt;
      &lt;td&gt;Bohemios&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1905&lt;/td&gt;
      &lt;td&gt;\N&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;\N&lt;/td&gt;
      &lt;td&gt;3.8&lt;/td&gt;
      &lt;td&gt;6.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;571&lt;/th&gt;
      &lt;td&gt;tt0000574&lt;/td&gt;
      &lt;td&gt;movie&lt;/td&gt;
      &lt;td&gt;The Story of the Kelly Gang&lt;/td&gt;
      &lt;td&gt;The Story of the Kelly Gang&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1906&lt;/td&gt;
      &lt;td&gt;\N&lt;/td&gt;
      &lt;td&gt;70&lt;/td&gt;
      &lt;td&gt;Biography,Crime,Drama&lt;/td&gt;
      &lt;td&gt;6.1&lt;/td&gt;
      &lt;td&gt;574.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h2 id=&#34;try-joining&#34;&gt;Try Joining&lt;/h2&gt;
&lt;p&gt;We are playing this pretty fast and loose, but we can get a rough sense of the movie ratings using a simple join and dropping any corner cases.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;joined = df.merge(imdb, how=&#39;left&#39;, left_on=&#39;yt_title&#39;, right_on=&#39;primaryTitle&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# remove any values with null
joined = joined.dropna().sort_values(&#39;primaryTitle&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s not deal with any overlap. Just the movies that have one match (Could also try to match durations to get more movies, but let&amp;rsquo;s ignore that right now).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;there are a bunch of items with multiple results&lt;/li&gt;
&lt;li&gt;Let&amp;rsquo;s see what we have without trying to dig out overlapping movies&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;joined.yt_title.value_counts()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Romeo and Juliet      10
Happily Ever After    10
Zoo                   10
The Suspect            8
Gone                   8
                      ..
A Cowgirl&#39;s Story      1
Mad Money              1
Bakery in Brooklyn     1
Snow Queen             1
17 Miracles            1
Name: yt_title, Length: 262, dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;singles = joined.groupby(&#39;yt_title&#39;)[&#39;yt_title&#39;].filter(lambda x: len(x) == 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;easy = joined[joined.yt_title.isin(singles)]
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;what-do-we-find&#34;&gt;What Do We Find?&lt;/h1&gt;
&lt;h2 id=&#34;the-highest-and-lowest-rated&#34;&gt;The Highest (and Lowest) Rated&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What are the top-rated movies available? Worst Rated?&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cols = [&#39;yt_title&#39;, &#39;averageRating&#39;, &#39;numVotes&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;easy[cols].sort_values(&#39;averageRating&#39;, ascending=False).head(10)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;yt_title&lt;/th&gt;
      &lt;th&gt;averageRating&lt;/th&gt;
      &lt;th&gt;numVotes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;478&lt;/th&gt;
      &lt;td&gt;The Usual Suspects&lt;/td&gt;
      &lt;td&gt;8.5&lt;/td&gt;
      &lt;td&gt;956313.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;429&lt;/th&gt;
      &lt;td&gt;Zeitgeist: Moving Forward&lt;/td&gt;
      &lt;td&gt;8.2&lt;/td&gt;
      &lt;td&gt;17246.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;440&lt;/th&gt;
      &lt;td&gt;Bones Brigade: An Autobiography&lt;/td&gt;
      &lt;td&gt;8.1&lt;/td&gt;
      &lt;td&gt;2306.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;433&lt;/th&gt;
      &lt;td&gt;Requiem for the American Dream&lt;/td&gt;
      &lt;td&gt;8.1&lt;/td&gt;
      &lt;td&gt;8297.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;712&lt;/th&gt;
      &lt;td&gt;Citizenfour&lt;/td&gt;
      &lt;td&gt;8.0&lt;/td&gt;
      &lt;td&gt;50670.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;413&lt;/th&gt;
      &lt;td&gt;Sound City&lt;/td&gt;
      &lt;td&gt;7.8&lt;/td&gt;
      &lt;td&gt;11887.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;308&lt;/th&gt;
      &lt;td&gt;Muscle Shoals&lt;/td&gt;
      &lt;td&gt;7.7&lt;/td&gt;
      &lt;td&gt;3400.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;303&lt;/th&gt;
      &lt;td&gt;Fat, Sick &amp;amp; Nearly Dead&lt;/td&gt;
      &lt;td&gt;7.5&lt;/td&gt;
      &lt;td&gt;8338.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;272&lt;/th&gt;
      &lt;td&gt;The Secret of Roan Inish&lt;/td&gt;
      &lt;td&gt;7.5&lt;/td&gt;
      &lt;td&gt;6792.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;319&lt;/th&gt;
      &lt;td&gt;Unbranded&lt;/td&gt;
      &lt;td&gt;7.4&lt;/td&gt;
      &lt;td&gt;1326.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;easy[cols].sort_values(&#39;averageRating&#39;).head(10)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;yt_title&lt;/th&gt;
      &lt;th&gt;averageRating&lt;/th&gt;
      &lt;th&gt;numVotes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;10&lt;/th&gt;
      &lt;td&gt;Disaster Movie&lt;/td&gt;
      &lt;td&gt;1.9&lt;/td&gt;
      &lt;td&gt;85558.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;636&lt;/th&gt;
      &lt;td&gt;Alcatraz&lt;/td&gt;
      &lt;td&gt;3.3&lt;/td&gt;
      &lt;td&gt;359.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;169&lt;/th&gt;
      &lt;td&gt;Spiders 3D&lt;/td&gt;
      &lt;td&gt;3.3&lt;/td&gt;
      &lt;td&gt;3960.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;707&lt;/th&gt;
      &lt;td&gt;The Remains&lt;/td&gt;
      &lt;td&gt;3.7&lt;/td&gt;
      &lt;td&gt;2870.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;513&lt;/th&gt;
      &lt;td&gt;Fist of the Warrior&lt;/td&gt;
      &lt;td&gt;3.8&lt;/td&gt;
      &lt;td&gt;369.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;740&lt;/th&gt;
      &lt;td&gt;Fishing Naked&lt;/td&gt;
      &lt;td&gt;4.0&lt;/td&gt;
      &lt;td&gt;782.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;160&lt;/th&gt;
      &lt;td&gt;Ribbit&lt;/td&gt;
      &lt;td&gt;4.0&lt;/td&gt;
      &lt;td&gt;611.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;74&lt;/th&gt;
      &lt;td&gt;Hollow Creek&lt;/td&gt;
      &lt;td&gt;4.2&lt;/td&gt;
      &lt;td&gt;592.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;327&lt;/th&gt;
      &lt;td&gt;Arthur &amp;amp; Merlin&lt;/td&gt;
      &lt;td&gt;4.3&lt;/td&gt;
      &lt;td&gt;1226.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;611&lt;/th&gt;
      &lt;td&gt;Out of Liberty&lt;/td&gt;
      &lt;td&gt;4.4&lt;/td&gt;
      &lt;td&gt;262.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h2 id=&#34;how-old-are-these-movies&#34;&gt;How Old Are These Movies?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Most are a few years old. Some are decades old.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;easy[&#39;startYear&#39;] = pd.to_numeric(easy.startYear)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;/Users/zachbogart/Documents/venv-breadbasket/sourdough_venv/lib/python3.7/site-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  &amp;quot;&amp;quot;&amp;quot;Entry point for launching an IPython kernel.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ax = sns.relplot(data=easy,
                x=&#39;startYear&#39;,
                y=&#39;averageRating&#39;,
                kind=&#39;scatter&#39;,
                hue=&#39;yt_minutes&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;index_files/index_46_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;scraping-the-bottom-of-the-barrel&#34;&gt;Scraping the Bottom of the Barrel&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Looks like the movies are pretty poorly rated, averaging around 6 out of 10&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ax = easy.averageRating.hist()
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;index_files/index_48_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(f&amp;quot;{easy.averageRating.mean():.2f}&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;5.95
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;overall&#34;&gt;Overall&lt;/h2&gt;
&lt;p&gt;You get what you (don&amp;rsquo;t) pay for.&lt;/p&gt;
&lt;h4 id=&#34;resources&#34;&gt;Resources&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python-guide.org/scenarios/scrape/&#34;&gt;https://docs.python-guide.org/scenarios/scrape/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-work-with-web-data-using-requests-and-beautiful-soup-with-python-3&#34;&gt;https://www.digitalocean.com/community/tutorials/how-to-work-with-web-data-using-requests-and-beautiful-soup-with-python-3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.geeksforgeeks.org/split-a-text-column-into-two-columns-in-pandas-dataframe/&#34;&gt;https://www.geeksforgeeks.org/split-a-text-column-into-two-columns-in-pandas-dataframe/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;image-credit&#34;&gt;Image Credit&lt;/h4&gt;
&lt;p&gt;integrated system by Zach Bogart from the 
&lt;a href=&#34;https://thenounproject.com/search/?q=integrated%20system&amp;amp;creator=4129988&amp;amp;i=3169228&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Noun Project&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
