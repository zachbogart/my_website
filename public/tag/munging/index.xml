<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>munging | Zach Bogart</title>
    <link>/tag/munging/</link>
      <atom:link href="/tag/munging/index.xml" rel="self" type="application/rss+xml" />
    <description>munging</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2020</copyright><lastBuildDate>Mon, 01 Jun 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/happy_nerd02.png</url>
      <title>munging</title>
      <link>/tag/munging/</link>
    </image>
    
    <item>
      <title>Looking into YouTube Free Movies</title>
      <link>/post/youtube-movies/</link>
      <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
      <guid>/post/youtube-movies/</guid>
      <description>&lt;p&gt;I saw that YouTube had 
&lt;a href=&#34;https://www.youtube.com/movies&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;a wide selection of movies&lt;/a&gt;, but the free movies didn&amp;rsquo;t seem very good. Was interested in seeing what kind of ratings the free movies on YouTube receive. Let&amp;rsquo;s figure it out!&lt;/p&gt;
&lt;h2 id=&#34;go-to-the-movies&#34;&gt;Go to the Movies&lt;/h2&gt;
&lt;p&gt;To start, let&amp;rsquo;s import some things.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
import requests
from bs4 import BeautifulSoup

import seaborn as sns
import matplotlib.pyplot as plt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can use &lt;code&gt;requests&lt;/code&gt; to grab the html.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;url = &#39;https://www.youtube.com/feed/storefront?bp=kgEmCGQSIlBMSFBUeFR4dEMwaWJWWnJUMl9XS1dVbDJTQXhzS3VLd3iiBQIoAg%3D%3D&#39;
page = requests.get(url)

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;soup = BeautifulSoup(page.text, &#39;html.parser&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(soup.prettify()[:200])

&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html data-cast-api-enabled=&amp;quot;true&amp;quot; lang=&amp;quot;en&amp;quot;&amp;gt;
 &amp;lt;head&amp;gt;
  &amp;lt;style name=&amp;quot;www-roboto&amp;quot;&amp;gt;
   @font-face{font-family:&#39;Roboto&#39;;font-style:normal;font-weight:500;src:local(&#39;Roboto Medium&#39;),local(
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, we can do some inspecting to find that each film has a &lt;code&gt;yt-lockup-title&lt;/code&gt; class that we can access. With a little bit of fiddling, we can get a dataframe of the movie names. There is also a common format which we can use to split the strings into separate columns.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;html_films = soup.find_all(class_=&amp;quot;yt-lockup-title&amp;quot;)

for film in html_films[:5]:
    print(film.get_text())
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Dino King - Duration: 1:28:47.
Snow Queen - Duration: 1:16:07.
Beyond Beyond - Duration: 1:19:24.
Igor (U.S) - Duration: 1:26:31.
Sleepover - Duration: 1:29:29.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;movies = [film.get_text() for film in html_films]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;movies[:6]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;[&#39;Dino King - Duration: 1:28:47.&#39;,
 &#39;Snow Queen - Duration: 1:16:07.&#39;,
 &#39;Beyond Beyond - Duration: 1:19:24.&#39;,
 &#39;Igor (U.S) - Duration: 1:26:31.&#39;,
 &#39;Sleepover - Duration: 1:29:29.&#39;,
 &#39;The Secret of Nimh - Duration: 1:22:46.&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.DataFrame(movies)
df.rename(columns={0: &#39;movie&#39;}, inplace=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[df.movie.str.contains(&#39; - Duration: &#39;)].head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;movie&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Dino King - Duration: 1:28:47.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Snow Queen - Duration: 1:16:07.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Beyond Beyond - Duration: 1:19:24.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Igor (U.S) - Duration: 1:26:31.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Sleepover - Duration: 1:29:29.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = df.movie.str.split(&#39; - Duration: &#39;, expand=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[1] = df[1].str.rstrip(&#39;.&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = df.reset_index()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.rename(columns={0: &#39;yt_title&#39;, 1: &#39;yt_duration&#39;, &#39;index&#39;: &#39;yt_id&#39;}, inplace=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;yt_id&lt;/th&gt;
      &lt;th&gt;yt_title&lt;/th&gt;
      &lt;th&gt;yt_duration&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;Dino King&lt;/td&gt;
      &lt;td&gt;1:28:47&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Snow Queen&lt;/td&gt;
      &lt;td&gt;1:16:07&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;Beyond Beyond&lt;/td&gt;
      &lt;td&gt;1:19:24&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;Igor (U.S)&lt;/td&gt;
      &lt;td&gt;1:26:31&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;Sleepover&lt;/td&gt;
      &lt;td&gt;1:29:29&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h3 id=&#34;convert-duration-to-minutes&#34;&gt;Convert Duration to minutes&lt;/h3&gt;
&lt;p&gt;The string movie time doesn&amp;rsquo;t mean much to us. Let&amp;rsquo;s turn it into minutes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def split_time(x):
    numbers = x.split(&#39;:&#39;)
    time = int(numbers[0]) * 60 + int(numbers[1])
    return time
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df[&#39;yt_minutes&#39;] = df[&#39;yt_duration&#39;].apply(split_time)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;imdb-data&#34;&gt;IMDb Data&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;We will use data from the IMDb datasets to get info on the movie ratings.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;imdb_ratings = pd.read_csv(&#39;/Users/zachbogart/Downloads/title.ratings.tsv&#39;, sep=&#39;\t&#39;)
imdb_basics = pd.read_csv(&#39;/Users/zachbogart/Downloads/title.basics.tsv&#39;, sep=&#39;\t&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;/Users/zachbogart/Documents/venv-breadbasket/sourdough_venv/lib/python3.7/site-packages/IPython/core/interactiveshell.py:3058: DtypeWarning: Columns (5) have mixed types.Specify dtype option on import or set low_memory=False.
  interactivity=interactivity, compiler=compiler, result=result)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;imdb = imdb_basics.merge(imdb_ratings, how=&#39;left&#39;, on=&#39;tconst&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;imdb.shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(6831547, 11)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s look just at items that are &lt;code&gt;movie&lt;/code&gt;s&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;imdb.titleType.value_counts()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;tvEpisode       4869408
short            741081
movie            551301
video            265727
tvSeries         184466
tvMovie          121175
tvMiniSeries      31078
tvSpecial         29209
videoGame         25548
tvShort           12554
Name: titleType, dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;imdb = imdb.loc[imdb.titleType == &#39;movie&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;imdb.shape
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;(551301, 11)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;imdb.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;tconst&lt;/th&gt;
      &lt;th&gt;titleType&lt;/th&gt;
      &lt;th&gt;primaryTitle&lt;/th&gt;
      &lt;th&gt;originalTitle&lt;/th&gt;
      &lt;th&gt;isAdult&lt;/th&gt;
      &lt;th&gt;startYear&lt;/th&gt;
      &lt;th&gt;endYear&lt;/th&gt;
      &lt;th&gt;runtimeMinutes&lt;/th&gt;
      &lt;th&gt;genres&lt;/th&gt;
      &lt;th&gt;averageRating&lt;/th&gt;
      &lt;th&gt;numVotes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;tt0000009&lt;/td&gt;
      &lt;td&gt;movie&lt;/td&gt;
      &lt;td&gt;Miss Jerry&lt;/td&gt;
      &lt;td&gt;Miss Jerry&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1894&lt;/td&gt;
      &lt;td&gt;\N&lt;/td&gt;
      &lt;td&gt;45&lt;/td&gt;
      &lt;td&gt;Romance&lt;/td&gt;
      &lt;td&gt;5.9&lt;/td&gt;
      &lt;td&gt;153.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;145&lt;/th&gt;
      &lt;td&gt;tt0000147&lt;/td&gt;
      &lt;td&gt;movie&lt;/td&gt;
      &lt;td&gt;The Corbett-Fitzsimmons Fight&lt;/td&gt;
      &lt;td&gt;The Corbett-Fitzsimmons Fight&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1897&lt;/td&gt;
      &lt;td&gt;\N&lt;/td&gt;
      &lt;td&gt;20&lt;/td&gt;
      &lt;td&gt;Documentary,News,Sport&lt;/td&gt;
      &lt;td&gt;5.2&lt;/td&gt;
      &lt;td&gt;346.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;332&lt;/th&gt;
      &lt;td&gt;tt0000335&lt;/td&gt;
      &lt;td&gt;movie&lt;/td&gt;
      &lt;td&gt;Soldiers of the Cross&lt;/td&gt;
      &lt;td&gt;Soldiers of the Cross&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1900&lt;/td&gt;
      &lt;td&gt;\N&lt;/td&gt;
      &lt;td&gt;\N&lt;/td&gt;
      &lt;td&gt;Biography,Drama&lt;/td&gt;
      &lt;td&gt;6.1&lt;/td&gt;
      &lt;td&gt;40.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;499&lt;/th&gt;
      &lt;td&gt;tt0000502&lt;/td&gt;
      &lt;td&gt;movie&lt;/td&gt;
      &lt;td&gt;Bohemios&lt;/td&gt;
      &lt;td&gt;Bohemios&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1905&lt;/td&gt;
      &lt;td&gt;\N&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;\N&lt;/td&gt;
      &lt;td&gt;3.8&lt;/td&gt;
      &lt;td&gt;6.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;571&lt;/th&gt;
      &lt;td&gt;tt0000574&lt;/td&gt;
      &lt;td&gt;movie&lt;/td&gt;
      &lt;td&gt;The Story of the Kelly Gang&lt;/td&gt;
      &lt;td&gt;The Story of the Kelly Gang&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1906&lt;/td&gt;
      &lt;td&gt;\N&lt;/td&gt;
      &lt;td&gt;70&lt;/td&gt;
      &lt;td&gt;Biography,Crime,Drama&lt;/td&gt;
      &lt;td&gt;6.1&lt;/td&gt;
      &lt;td&gt;574.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h2 id=&#34;try-joining&#34;&gt;Try Joining&lt;/h2&gt;
&lt;p&gt;We are playing this pretty fast and loose, but we can get a rough sense of the movie ratings using a simple join and dropping any corner cases.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;joined = df.merge(imdb, how=&#39;left&#39;, left_on=&#39;yt_title&#39;, right_on=&#39;primaryTitle&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# remove any values with null
joined = joined.dropna().sort_values(&#39;primaryTitle&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s not deal with any overlap. Just the movies that have one match (Could also try to match durations to get more movies, but let&amp;rsquo;s ignore that right now).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;there are a bunch of items with multiple results&lt;/li&gt;
&lt;li&gt;Let&amp;rsquo;s see what we have without trying to dig out overlapping movies&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;joined.yt_title.value_counts()
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Romeo and Juliet      10
Happily Ever After    10
Zoo                   10
The Suspect            8
Gone                   8
                      ..
A Cowgirl&#39;s Story      1
Mad Money              1
Bakery in Brooklyn     1
Snow Queen             1
17 Miracles            1
Name: yt_title, Length: 262, dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;singles = joined.groupby(&#39;yt_title&#39;)[&#39;yt_title&#39;].filter(lambda x: len(x) == 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;easy = joined[joined.yt_title.isin(singles)]
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;what-do-we-find&#34;&gt;What Do We Find?&lt;/h1&gt;
&lt;h2 id=&#34;the-highest-and-lowest-rated&#34;&gt;The Highest (and Lowest) Rated&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What are the top-rated movies available? Worst Rated?&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cols = [&#39;yt_title&#39;, &#39;averageRating&#39;, &#39;numVotes&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;easy[cols].sort_values(&#39;averageRating&#39;, ascending=False).head(10)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;yt_title&lt;/th&gt;
      &lt;th&gt;averageRating&lt;/th&gt;
      &lt;th&gt;numVotes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;478&lt;/th&gt;
      &lt;td&gt;The Usual Suspects&lt;/td&gt;
      &lt;td&gt;8.5&lt;/td&gt;
      &lt;td&gt;956313.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;429&lt;/th&gt;
      &lt;td&gt;Zeitgeist: Moving Forward&lt;/td&gt;
      &lt;td&gt;8.2&lt;/td&gt;
      &lt;td&gt;17246.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;440&lt;/th&gt;
      &lt;td&gt;Bones Brigade: An Autobiography&lt;/td&gt;
      &lt;td&gt;8.1&lt;/td&gt;
      &lt;td&gt;2306.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;433&lt;/th&gt;
      &lt;td&gt;Requiem for the American Dream&lt;/td&gt;
      &lt;td&gt;8.1&lt;/td&gt;
      &lt;td&gt;8297.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;712&lt;/th&gt;
      &lt;td&gt;Citizenfour&lt;/td&gt;
      &lt;td&gt;8.0&lt;/td&gt;
      &lt;td&gt;50670.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;413&lt;/th&gt;
      &lt;td&gt;Sound City&lt;/td&gt;
      &lt;td&gt;7.8&lt;/td&gt;
      &lt;td&gt;11887.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;308&lt;/th&gt;
      &lt;td&gt;Muscle Shoals&lt;/td&gt;
      &lt;td&gt;7.7&lt;/td&gt;
      &lt;td&gt;3400.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;303&lt;/th&gt;
      &lt;td&gt;Fat, Sick &amp;amp; Nearly Dead&lt;/td&gt;
      &lt;td&gt;7.5&lt;/td&gt;
      &lt;td&gt;8338.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;272&lt;/th&gt;
      &lt;td&gt;The Secret of Roan Inish&lt;/td&gt;
      &lt;td&gt;7.5&lt;/td&gt;
      &lt;td&gt;6792.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;319&lt;/th&gt;
      &lt;td&gt;Unbranded&lt;/td&gt;
      &lt;td&gt;7.4&lt;/td&gt;
      &lt;td&gt;1326.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;easy[cols].sort_values(&#39;averageRating&#39;).head(10)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;yt_title&lt;/th&gt;
      &lt;th&gt;averageRating&lt;/th&gt;
      &lt;th&gt;numVotes&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;10&lt;/th&gt;
      &lt;td&gt;Disaster Movie&lt;/td&gt;
      &lt;td&gt;1.9&lt;/td&gt;
      &lt;td&gt;85558.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;636&lt;/th&gt;
      &lt;td&gt;Alcatraz&lt;/td&gt;
      &lt;td&gt;3.3&lt;/td&gt;
      &lt;td&gt;359.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;169&lt;/th&gt;
      &lt;td&gt;Spiders 3D&lt;/td&gt;
      &lt;td&gt;3.3&lt;/td&gt;
      &lt;td&gt;3960.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;707&lt;/th&gt;
      &lt;td&gt;The Remains&lt;/td&gt;
      &lt;td&gt;3.7&lt;/td&gt;
      &lt;td&gt;2870.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;513&lt;/th&gt;
      &lt;td&gt;Fist of the Warrior&lt;/td&gt;
      &lt;td&gt;3.8&lt;/td&gt;
      &lt;td&gt;369.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;740&lt;/th&gt;
      &lt;td&gt;Fishing Naked&lt;/td&gt;
      &lt;td&gt;4.0&lt;/td&gt;
      &lt;td&gt;782.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;160&lt;/th&gt;
      &lt;td&gt;Ribbit&lt;/td&gt;
      &lt;td&gt;4.0&lt;/td&gt;
      &lt;td&gt;611.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;74&lt;/th&gt;
      &lt;td&gt;Hollow Creek&lt;/td&gt;
      &lt;td&gt;4.2&lt;/td&gt;
      &lt;td&gt;592.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;327&lt;/th&gt;
      &lt;td&gt;Arthur &amp;amp; Merlin&lt;/td&gt;
      &lt;td&gt;4.3&lt;/td&gt;
      &lt;td&gt;1226.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;611&lt;/th&gt;
      &lt;td&gt;Out of Liberty&lt;/td&gt;
      &lt;td&gt;4.4&lt;/td&gt;
      &lt;td&gt;262.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h2 id=&#34;how-old-are-these-movies&#34;&gt;How Old Are These Movies?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Most are a few years old. Some are decades old.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;easy[&#39;startYear&#39;] = pd.to_numeric(easy.startYear)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;/Users/zachbogart/Documents/venv-breadbasket/sourdough_venv/lib/python3.7/site-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  &amp;quot;&amp;quot;&amp;quot;Entry point for launching an IPython kernel.
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ax = sns.relplot(data=easy,
                x=&#39;startYear&#39;,
                y=&#39;averageRating&#39;,
                kind=&#39;scatter&#39;,
                hue=&#39;yt_minutes&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;index_files/index_46_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;scraping-the-bottom-of-the-barrel&#34;&gt;Scraping the Bottom of the Barrel&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Looks like the movies are pretty poorly rated, averaging around 6 out of 10&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;ax = easy.averageRating.hist()
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;index_files/index_48_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(f&amp;quot;{easy.averageRating.mean():.2f}&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;5.95
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;overall&#34;&gt;Overall&lt;/h2&gt;
&lt;p&gt;You get what you (don&amp;rsquo;t) pay for.&lt;/p&gt;
&lt;h4 id=&#34;resources&#34;&gt;Resources&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python-guide.org/scenarios/scrape/&#34;&gt;https://docs.python-guide.org/scenarios/scrape/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-work-with-web-data-using-requests-and-beautiful-soup-with-python-3&#34;&gt;https://www.digitalocean.com/community/tutorials/how-to-work-with-web-data-using-requests-and-beautiful-soup-with-python-3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.geeksforgeeks.org/split-a-text-column-into-two-columns-in-pandas-dataframe/&#34;&gt;https://www.geeksforgeeks.org/split-a-text-column-into-two-columns-in-pandas-dataframe/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;image-credit&#34;&gt;Image Credit&lt;/h4&gt;
&lt;p&gt;
&lt;a href=&#34;https://thenounproject.com/search/?q=integrated%20system&amp;amp;creator=4129988&amp;amp;i=3169228&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;integrated system&lt;/a&gt; by Zach Bogart from 
&lt;a href=&#34;https://thenounproject.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the Noun Project&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
