<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>grouping | Zach Bogart</title>
    <link>/tag/grouping/</link>
      <atom:link href="/tag/grouping/index.xml" rel="self" type="application/rss+xml" />
    <description>grouping</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>Â© 2020</copyright><lastBuildDate>Sun, 26 Jul 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/happy_nerd02.png</url>
      <title>grouping</title>
      <link>/tag/grouping/</link>
    </image>
    
    <item>
      <title>A Python Blog Post I Often Reach For</title>
      <link>/post/pandas-grouping-data/</link>
      <pubDate>Sun, 26 Jul 2020 00:00:00 +0000</pubDate>
      <guid>/post/pandas-grouping-data/</guid>
      <description>&lt;p&gt;I find I have to do a lot of grouping in pandas and I reach for 
&lt;a href=&#34;https://www.shanelynn.ie/summarising-aggregation-and-grouping-data-in-python-pandas/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this blog post by Shane Lynn&lt;/a&gt; all the  time to remind me how to get it done. I&amp;rsquo;ve found grouping things in pandas difficult sometimes, usually when  I want to create a column in the original dataframe by grouping stuff. This technique solves that and I&amp;rsquo;m super grateful to it.&lt;/p&gt;
&lt;h2 id=&#34;so-group-already&#34;&gt;So Group, Already&lt;/h2&gt;
&lt;p&gt;Learning works best when you try it out yourself, so let&amp;rsquo;s give it a go!&lt;/p&gt;
&lt;p&gt;Say I have some  census data and  I want to group it together to get the sum of each group.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dataset is from 
&lt;a href=&#34;https://www.kaggle.com/muonneutrino/us-census-demographic-data/data&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;US Census Demographics Data&lt;/a&gt; on Kaggle&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df = pd.read_csv(&amp;quot;/Users/bogart/Downloads/7001_312628_bundle_archive/acs2017_county_data.csv&amp;quot;)
df =  df[[&#39;State&#39;, &#39;County&#39;, &#39;TotalPop&#39;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;State&lt;/th&gt;
      &lt;th&gt;County&lt;/th&gt;
      &lt;th&gt;TotalPop&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Alabama&lt;/td&gt;
      &lt;td&gt;Autauga County&lt;/td&gt;
      &lt;td&gt;55036&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Alabama&lt;/td&gt;
      &lt;td&gt;Baldwin County&lt;/td&gt;
      &lt;td&gt;203360&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Alabama&lt;/td&gt;
      &lt;td&gt;Barbour County&lt;/td&gt;
      &lt;td&gt;26201&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Alabama&lt;/td&gt;
      &lt;td&gt;Bibb County&lt;/td&gt;
      &lt;td&gt;22580&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Alabama&lt;/td&gt;
      &lt;td&gt;Blount County&lt;/td&gt;
      &lt;td&gt;57667&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Using  the method from the blog post, I can make a grouped dataframe that sums up the populations for each county:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.groupby(&#39;State&#39;).agg(
    state_pop = pd.NamedAgg(column=&#39;TotalPop&#39;, aggfunc=&#39;sum&#39;)
).head(7)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;state_pop&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;State&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;Alabama&lt;/th&gt;
      &lt;td&gt;4850771&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Alaska&lt;/th&gt;
      &lt;td&gt;738565&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Arizona&lt;/th&gt;
      &lt;td&gt;6809946&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Arkansas&lt;/th&gt;
      &lt;td&gt;2977944&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;California&lt;/th&gt;
      &lt;td&gt;38982847&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Colorado&lt;/th&gt;
      &lt;td&gt;5436519&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Connecticut&lt;/th&gt;
      &lt;td&gt;3594478&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;If  I wrap it in a &lt;code&gt;.join()&lt;/code&gt;, I can add it back to the original  dataframe to use later:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;df.join(df.groupby(&#39;State&#39;).agg(
    state_pop = pd.NamedAgg(column=&#39;TotalPop&#39;, aggfunc=&#39;sum&#39;)
), on=&#39;State&#39;).head(7)
&lt;/code&gt;&lt;/pre&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }
&lt;pre&gt;&lt;code&gt;.dataframe tbody tr th {
    vertical-align: top;
}

.dataframe thead th {
    text-align: right;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;/style&gt;&lt;/p&gt;
&lt;table border=&#34;1&#34; class=&#34;dataframe&#34;&gt;
  &lt;thead&gt;
    &lt;tr style=&#34;text-align: right;&#34;&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;State&lt;/th&gt;
      &lt;th&gt;County&lt;/th&gt;
      &lt;th&gt;TotalPop&lt;/th&gt;
      &lt;th&gt;state_pop&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;Alabama&lt;/td&gt;
      &lt;td&gt;Autauga County&lt;/td&gt;
      &lt;td&gt;55036&lt;/td&gt;
      &lt;td&gt;4850771&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;Alabama&lt;/td&gt;
      &lt;td&gt;Baldwin County&lt;/td&gt;
      &lt;td&gt;203360&lt;/td&gt;
      &lt;td&gt;4850771&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;Alabama&lt;/td&gt;
      &lt;td&gt;Barbour County&lt;/td&gt;
      &lt;td&gt;26201&lt;/td&gt;
      &lt;td&gt;4850771&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;Alabama&lt;/td&gt;
      &lt;td&gt;Bibb County&lt;/td&gt;
      &lt;td&gt;22580&lt;/td&gt;
      &lt;td&gt;4850771&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;Alabama&lt;/td&gt;
      &lt;td&gt;Blount County&lt;/td&gt;
      &lt;td&gt;57667&lt;/td&gt;
      &lt;td&gt;4850771&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;Alabama&lt;/td&gt;
      &lt;td&gt;Bullock County&lt;/td&gt;
      &lt;td&gt;10478&lt;/td&gt;
      &lt;td&gt;4850771&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;Alabama&lt;/td&gt;
      &lt;td&gt;Butler County&lt;/td&gt;
      &lt;td&gt;20126&lt;/td&gt;
      &lt;td&gt;4850771&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;h2 id=&#34;overall&#34;&gt;Overall&lt;/h2&gt;
&lt;p&gt;Grouping data happens a bunch,  but it can be complicated to remember  the mechanics. It can also feel sometimes like blog posts  are shouts into a  void, but they can be the best teaching tools out there! Gotta say thanks again to Shane Lynn; I review 
&lt;a href=&#34;https://shanelynnwebsite-mid9n9g1q9y8tt.netdna-ssl.com/wp-content/uploads/2019/10/pandas-python-group-by-named-aggregation-update.jpg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the screenshot at the top of your blog post&lt;/a&gt; often.&lt;/p&gt;
&lt;h4 id=&#34;image-credit&#34;&gt;Image Credit&lt;/h4&gt;
&lt;p&gt;
&lt;a href=&#34;https://thenounproject.com/search/?q=dataframe&amp;amp;creator=4129988&amp;amp;i=3097973&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;merged dataframes&lt;/a&gt; by Zach Bogart from 
&lt;a href=&#34;https://thenounproject.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;the Noun Project&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
